// backend/prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Model (Admin and Area Admins)
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String
  phone         String?
  role          UserRole
  passwordHash  String
  areaName      String?   // Only for AreaAdmins
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  assignedMembers Member[]  @relation("AreaAdminMembers")
  // --- ADD RELATION TO PAYMENTS RECORDED BY THIS USER ---
  recordedPayments Payment[] @relation("Recorder")

  @@map("users")
}

enum UserRole {
  Admin
  AreaAdmin
}

// Member Model
model Member {
  id                  String    @id @default(cuid())
  name                String
  phone               String
  address             String
  monthlyAmount       Float
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  // Relation to assigned Area Admin
  assignedAreaAdminId String?
  assignedAreaAdmin   User?     @relation("AreaAdminMembers", fields: [assignedAreaAdminId], references: [id])

  // --- ADD RELATION TO PAYMENTS MADE BY THIS MEMBER ---
  payments            Payment[] @relation("MemberPayments")

  @@map("members")
}


// --- **NEW** Payment Model ---
model Payment {
  id              String        @id @default(cuid())
  amountPaid      Float         // How much was paid
  paymentDate     DateTime      // When the payment was actually made/recorded
  paymentMonth    Int           // e.g., 1 for January, 12 for December
  paymentYear     Int           // e.g., 2024
  paymentMethod   PaymentMethod // 'Cash' or 'Online'
  createdAt       DateTime      @default(now())
  // Optional: Add updatedAt if payments can be edited
  // updatedAt    DateTime      @updatedAt

  // --- Relations ---
  memberId        String        // Foreign key linking to the Member who paid
  member          Member        @relation("MemberPayments", fields: [memberId], references: [id], onDelete: Cascade) // Link to Member model (Cascade means delete payments if member deleted)

  recordedById    String        // Foreign key linking to the User (AreaAdmin) who recorded it
  recordedBy      User          @relation("Recorder", fields: [recordedById], references: [id]) // Link to User model

  @@map("payments") // Maps to 'payments' table
}

// Enum for Payment Method
enum PaymentMethod {
  Cash
  Online
}