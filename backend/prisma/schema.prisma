// backend/prisma/schema.prisma (Final Version with onDelete Rules)

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // Reads Supabase URL from .env
}

// --- Area Model ---
model Area {
  id            String   @id @default(cuid())
  name          String   @unique // The address/locality name, must be unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // --- Relations ---
  // Area Admins assigned to this Area (Many-to-Many setup below)
  assignedUsers User[]   @relation("AreaAssignments")
  // Members belonging to this Area (One-to-Many)
  members       Member[]

  @@map("areas") // Maps to 'areas' table
}


// --- User Model (Admin and Area Admins) ---
model User {
  id             String    @id @default(cuid())
  email          String    @unique
  name           String
  phone          String?
  role           UserRole
  passwordHash   String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // --- Relations ---
  // Which Members are assigned to this User (if AreaAdmin)
  assignedMembers Member[]  @relation("AreaAdminMembers") // Relation details defined on Member side
  // Which Payments were recorded by this User
  recordedPayments Payment[] @relation("Recorder")        // Relation details defined on Payment side
  // Which Areas is this User (if AreaAdmin) assigned to (Many-to-Many)
  assignedAreas  Area[]    @relation("AreaAssignments")

  @@map("users")
}

enum UserRole {
  Admin
  AreaAdmin
}

// --- Member Model ---
model Member {
  id                  String    @id @default(cuid())
  name                String
  phone               String
  monthlyAmount       Float
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  // Relation to assigned Area Admin (User)
  assignedAreaAdminId String?   // Field is optional
  // ** MODIFIED: Added onDelete: SetNull **
  assignedAreaAdmin   User?     @relation("AreaAdminMembers", fields: [assignedAreaAdminId], references: [id], onDelete: SetNull)

  // Relation to specific Area
  areaId              String    // Field is required
  area                Area      @relation(fields: [areaId], references: [id]) // Default onDelete is Restrict

  // Relation to Payments
  payments            Payment[] @relation("MemberPayments") // Relation details defined on Payment side

  @@map("members")
}


// --- Payment Model ---
model Payment {
  id            String        @id @default(cuid())
  amountPaid    Float
  paymentDate   DateTime
  paymentMonth  Int
  paymentYear   Int
  paymentMethod PaymentMethod
  createdAt     DateTime      @default(now())

  // Relations
  memberId      String
  member        Member        @relation("MemberPayments", fields: [memberId], references: [id], onDelete: Cascade) // If Member deleted, delete their Payments

  // ** MODIFIED: recordedById is now Optional, added onDelete: SetNull **
  recordedById  String?       // <-- CHANGED to optional 'String?'
  recordedBy    User?         @relation("Recorder", fields: [recordedById], references: [id], onDelete: SetNull) // <-- ADDED onDelete, CHANGED User?

  @@map("payments")
}

enum PaymentMethod {
  Cash
  Online
}

// Prisma automatically creates the join table for the Many-to-Many
// relation between User and Area specified by @relation("AreaAssignments")